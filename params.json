{"tagline":"Minecraft plugins implemented in Scala","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"MinecraftPlugins","google":"","body":"# Overview\r\n\r\nThis project contains an API for building Minecraft Plugins in Scala.\r\nIt is currently made up of several sub-projects, but the most important ones to know about are:\r\n\r\n  * microexample - A first example of how to create a plugin in Scala.\r\n  * examples     - Several more example plugins using the core API\r\n  * core         - The core API\r\n  \r\nThere are several reasons for building this API, but the three that pop to mind immediately are:\r\n\r\n  * To show how easy it is to put better/cleaner APIs on top of existing Java APIs.\r\n  * To make command and argument parsing vastly easier using parser combinators.\r\n  * To hopefully spark some interest in Scala among the Minecraft community.\r\n\r\nNote: The core API is built on Bukkit version 1.4.6-R0.1 (http://bukkit.org/). \r\n\r\n## Examples\r\n\r\n### Listener example: LightningArrows\r\n\r\nThe following example demonstrates how to use listeners in Scala.\r\nThis plugin strikes an entity (any player or mob) with lightning\r\nif that entity is hit with an arrow:\r\n\r\n```scala\r\nimport jcdc.pluginfactory.Listeners._\r\nimport org.bukkit.entity.EntityType.ARROW\r\n\r\nclass LightningArrows extends ListeningFor(OnEntityDamageByEntity { e =>\r\n  if (e.getDamager isAn ARROW) e.world.strikeLightning(e.loc)\r\n})\r\n```\r\n\r\n### Commands example: Shock\r\n\r\nThe following example demonstrates how to write commands in Scala.\r\nIt has one command called \"shock\" which takes a player as input,\r\nand shocks that player with lightning.\r\n\r\n```scala\r\nimport jcdc.pluginfactory.CommandPlugin\r\n\r\nclass Shock extends CommandPlugin {\r\n  val command = Command(\"shock\", \"shock a player\", player){ case (you, them) =>\r\n    them.shock\r\n  }\r\n}\r\n```\r\n\r\n## Other Stuff\r\n\r\nThere are a few other sub projects and I'll mention them just very briefly here.\r\n\r\n  * netlogo      - A plugin that enables running NetLogo models in Minecraft servers.\r\n                   More info here: [NetLogo Plugin](https://github.com/joshcough/MinecraftPlugins/wiki/NetLogo)\r\n  * minelang     - An ongoing attempt at writing my own language\r\n                  (very much like Clojure, but not as good) that allows users to write their own\r\n                  minecraft plugins without having to know anything about IDE's and Jar files and\r\n                  stuff like that. I don't have any other information to give on this just yet, though.\r\n\r\n\r\n"}